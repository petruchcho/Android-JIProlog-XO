%"Интеллектуальные" крестики-нолики на Java Internet Prolog
%компьютер умеет играть и за крестики, и за 0
% (С) А.А. Тюгашев 2014

%Клетки поля задаются координатами, напимер, [3,1] - правый верхний угол 
%сначала номер вертикали!
%   1     2     3
%1     |      |      
%---------------------
%2     |      |     
%---------------------
%3     |      |

%вспомогательный предикат - определяет пустоту поля
free(X):-p(-,X).

%вспомогательный предикат - определяет, чем играет соперник
partner(0,x).
partner(x,0).

%вспомогательный предикат - дополнение до заполнения полного списка координат [1,2,3] на генераторе всех перестановок элементов троек
%т.е. для [1,X,2]  дает X=3, для [1,2,X] - X=3, для [X,2,3] - 1, и так далее 
dop(X):-permutation([1,2,3],X).

%что такое "на одной линии"
same_line(S):-glav_diagonal(L),permutation(S,L). 
same_line(S):-pob_diagonal(L),permutation(S,L). 
same_line(S):-vertikal(L),permutation(S,L).
same_line(S):-horizontal(L),permutation(S,L).

%главная и побочная диагонали, горизонталь, вертикаль
glav_diagonal([[1,1],[2,2],[3,3]]).
pob_diagonal([[3,1],[2,2],[1,3]]).
horizontal([[P,Y],[K,Y],[L,Y]]):-dop([P,K,L]),dop([Y,_,_]).
vertikal([[X,P],[X,K],[X,L]]):-dop([P,K,L]),dop([X,_,_]).

%========================================================== ОСНОВНАЯ ЛОГИКА ИГРЫ - предикат hod (Чем,Куда) например Hod(x,[3,1]).
%порядок предикатов hodl(D,P) имеет значение, используется отсечение ! после выбора хода для отбрасывания нижестоящих

%------------------ Первым делом пытаемся выиграть, затем не проиграть  
hod(D,P):-free(P),try_win(D,P),!.
%----- не проиграй
hod(D,P):-free(P),not_lose(D,P),!.

%----- Если уже есть два одинаковых на одной линии -> делаем ход, либо завершающий заполнение линии, либо мешающий, если стоят знаки противника
try_win(D,P):-same_line([X,Y,P]),p(D,X),p(D,Y),not(free(X)),!.
not_lose(O,P):-same_line([X,Y,P]),p(D,X),p(D,Y),partner(O,D),!.

%--------------------------------- Следующий по приоритетности ход - поставить вилку --------------------------------------------------------
hod(D,P):-free(P),try_attack(D,P),!.
%---------------------------- вилка образуется если станет после хода два одинаковых знака на одной линии, не блокирована атака, и еще по одной линии - то же самое
try_attack(D,X):-same_line([X,P,M]),same_line([X,K,L]),p(D,P),p(D,K),free(M),free(L),P\=K,M\=L,!.

%Если ничего выше не подошло 
%------------- вспомогательная логика для ходов начала игры
ugol([3,3]). ugol([1,1]). ugol([1,3]).

%самый сильный первый ход - в [3,1] 
hod(_,[3,1]):-free([3,1]),!. %и крестиками, и ноликами и доступность поля [3,1]  можно отдельно не проверять ;-)
hod(0,[2,2]):-free([2,2]),!.
hod(x,U):-free(U),glav_diagonal([P,L,U]),p(0,L),p(x,P),!.
hod(x,U):-free(U),pob_diagonal([P,L,U]),p(0,L),p(x,P),!.
hod(x,[2,2] ):-free([2,2] ),p(0,O),not(ugol(O)),!.
hod(x,X):-free(X),p(0,O),ugol(O),ugol(X),!.
hod(0,[2,1] ):-free([2,1] ),p(0,[2,2] ),!.
hod(0,O):-free(O),ugol(O),p(x,[2,2] ),!.

%иначе - в первую попавшуюся случайную клетку 
hod(D,P):-free(P),!.
